name: Publish Wasm Demo

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name to append demo link for (e.g. 1.1.2)"
        required: true

permissions:
  contents: write

jobs:
  publish-wasm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Build Wasm production executable
        run: ./gradlew :samples:wasm:wasmJsBrowserDistribution

      - name: Deploy Wasm demo for this release
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: samples/wasm/build/dist/wasmJs/productionExecutable
          destination_dir: wasm-demo/${{ github.event.inputs.tag || github.ref_name }}
          keep_files: true
          commit_message: "Deploy Wasm demo for release ${{ github.event.inputs.tag || github.ref_name }}"

      - name: Append demo link to release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.tag || github.ref_name }}
          REPO: ${{ github.repository }}
        run: |
          DEMO_URL="https://pingpongboss.github.io/compose-exploded-layers/wasm-demo/${TAG}/"
          LINK_TEXT="wasm-demo-${TAG}"
          SECTION=$'\n\n## üåê Live Demo\nTry this release directly in your browser (no install needed):\n\n'"[**Open ${LINK_TEXT} ‚Üí**](${DEMO_URL})"
          
          # Get the existing release info
          API_URL="https://api.github.com/repos/${REPO}/releases/tags/${TAG}"
          RELEASE_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" | jq -r .id)
          
          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "‚ùå No release found for tag '${TAG}'."
            exit 1
          fi
          
          BODY=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" | jq -r .body)

          # Append if not already included
          if ! grep -q "$DEMO_URL" <<< "$BODY"; then
            NEW_BODY="${BODY}${SECTION}"
            jq -n --arg body "$NEW_BODY" '{body: $body}' |
              curl -s -X PATCH \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d @- \
                "https://api.github.com/repos/${REPO}/releases/${RELEASE_ID}"
            echo "‚úÖ Appended demo link to release notes."
          else
            echo "‚ÑπÔ∏è Demo link already present. Skipping."
          fi
