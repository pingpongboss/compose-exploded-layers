name: Build and Upload Desktop (JVM) Sample JAR

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag name to upload desktop JAR to (e.g. 1.1.2)"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.event.release.tag_name }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Build desktop JAR
        run: ./gradlew :samples:jvm:jvmDesktopDistribution

      - name: Rename JAR
        run: |
          mkdir -p samples/jvm/build/outputs/jar
          mv samples/jvm/build/dist/ExplodedLayersDesktop.jar samples/jvm/build/outputs/jar/desktop-sample-${{ github.event.inputs.tag || github.event.release.tag_name }}.jar

      - name: Upload JAR to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: samples/jvm/build/outputs/jar/desktop-sample-${{ github.event.inputs.tag || github.event.release.tag_name }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Append desktop instructions to release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.tag || github.event.release.tag_name }}
          REPO: ${{ github.repository }}
        run: |
          LINK_TEXT="desktop-sample-${TAG}.jar"
          SECTION=$'\n\n## üñ•Ô∏è Desktop Demo\nDownload and run locally (requires **Java 17+**):\n\n```bash\njava -jar '"${LINK_TEXT}"$'\n```\n'

          API_URL="https://api.github.com/repos/${REPO}/releases/tags/${TAG}"
          RELEASE_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" | jq -r .id)

          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "‚ùå No release found for tag '${TAG}'."
            exit 1
          fi

          BODY=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" | jq -r .body)

          if ! grep -q "Desktop Demo" <<< "$BODY"; then
            NEW_BODY="${BODY}${SECTION}"
            jq -n --arg body "$NEW_BODY" '{body: $body}' |
              curl -s -X PATCH \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d @- \
                "https://api.github.com/repos/${REPO}/releases/${RELEASE_ID}"
            echo "‚úÖ Appended desktop instructions to release notes."
          else
            echo "‚ÑπÔ∏è Desktop section already present. Skipping."
          fi
